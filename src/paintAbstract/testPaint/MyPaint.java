/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package paintAbstract.testPaint;

import java.awt.Color;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import paintAbstract.*;

/**
 *
 * @author Sajjad
 */
public class MyPaint extends javax.swing.JFrame {
    Point[] pointArray = new Point[1];
    ShapeTypes curShape = ShapeTypes.Line;
    ActionType curAction = ActionType.Draw;
    Color curBorderColor = Color.MAGENTA;
    Color curFillColor = Color.cyan;
    Point p1, p2, p3;
    ArrayList<Point> pArr;
    PaintingArea myArea;

    /**
     * Creates new form MyPaint
     */




    private void btnOvalActionPerformed(ActionEvent e) {
        // TODO add your code here
        curAction = ActionType.Draw;
        curShape = ShapeTypes.Oval;
        p1 = p2 = p3 = null;
        pArr.clear();
    }

    private void triangle(ActionEvent e) {
        // TODO add your code here
        curAction = ActionType.Draw;
        curShape = ShapeTypes.Triangle;
        p1 = p2 = p3 = null;
        pArr.clear();
    }

    private void poly(ActionEvent e) {
        // TODO add your code here
        curAction = ActionType.Draw;
        curShape = ShapeTypes.Polygon;
        p1 = p2 = p3 = null;
        pArr.clear();
    }

    private void square(ActionEvent e) {
        // TODO add your code here
        curAction = ActionType.Draw;
        curShape = ShapeTypes.Square;
        p1 = p2 = p3 = null;
        pArr.clear();
    }

    private void zoomIn(ActionEvent e) {
        curAction = ActionType.ZoomIn;
        p1 = p2 = p3 = null;
        pArr.clear();
    }

    private void zoomOut(ActionEvent e) {
        // TODO add your code here
        curAction = ActionType.ZoomOut;
        p1 = p2 = p3 = null;
        pArr.clear();
    }

    private void radioButtonBLUE(ActionEvent e) {
        // TODO add your code here
        if (chbIsFill.isSelected()) {
            curFillColor = new Color(0 , 0 , 255);
        } else {
            curBorderColor = new Color(0, 0, 255);
        }
    }

    private void radioButton2RED(ActionEvent e) {
        // TODO add your code here
        if (chbIsFill.isSelected()){
            curFillColor = new Color(255 , 0 , 0);
        } else {
            curBorderColor = new Color(255 , 0 , 0);
        }
    }

    private void radioButton3GREEN(ActionEvent e) {
        // TODO add your code here
        if (chbIsFill.isSelected()){
            curFillColor = new Color(0 , 255 , 0);
        } else {
            curBorderColor = new Color(0 , 255 , 0);
        }
    }

    private void radioButton4BLUE(ActionEvent e) {
        // TODO add your code here
        this.curBorderColor = null;
        this.curFillColor = null;
        if (chbIsFill.isSelected()){
            curFillColor = new Color(25);
        } else {
            curBorderColor = new Color(25);
        }
    }

    private void radioButton5YELLOW(ActionEvent e) {
        // TODO add your code here
        if (chbIsFill.isSelected()){
            curFillColor = new Color(255 , 255 , 0);
        } else {
            curBorderColor = new Color(255 , 255 , 0);
        }
    }



    public MyPaint() {
        initComponents();
        myArea = new PaintingArea(paintPanel.getGraphics(), paintPanel.getWidth(), paintPanel.getHeight());
        pArr = new ArrayList();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - Parsa Es
    private void initComponents() {
        paintPanel = new JPanel();
        btnLine = new JButton();
        btnRect = new JButton();
        btnCircle = new JButton();
        btnMove = new JButton();
        btnErase = new JButton();
        chbIsFill = new JCheckBox();
        triangleButton = new JButton();
        polyButton = new JButton();
        squareButton = new JButton();
        zoomOutButton = new JButton();
        zoomInButton = new JButton();
        ovalButton = new JButton();
        radioButton1 = new JRadioButton();
        radioButton2 = new JRadioButton();
        radioButton3 = new JRadioButton();
        radioButton4 = new JRadioButton();
        radioButton5 = new JRadioButton();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        var contentPane = getContentPane();

        //======== paintPanel ========
        {
            paintPanel.setBackground(Color.white);
            paintPanel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    paintPanelMouseClicked(e);
                }
            });
            paintPanel.setBorder ( new javax . swing. border .CompoundBorder ( new javax . swing. border .TitledBorder ( new javax . swing. border
            .EmptyBorder ( 0, 0 ,0 , 0) ,  "JF\u006frmD\u0065sig\u006eer \u0045val\u0075ati\u006fn" , javax. swing .border . TitledBorder. CENTER ,javax
            . swing. border .TitledBorder . BOTTOM, new java. awt .Font ( "Dia\u006cog", java .awt . Font. BOLD ,
            12 ) ,java . awt. Color .red ) ,paintPanel. getBorder () ) ); paintPanel. addPropertyChangeListener( new java. beans
            .PropertyChangeListener ( ){ @Override public void propertyChange (java . beans. PropertyChangeEvent e) { if( "\u0062ord\u0065r" .equals ( e.
            getPropertyName () ) )throw new RuntimeException( ) ;} } );

            GroupLayout paintPanelLayout = new GroupLayout(paintPanel);
            paintPanel.setLayout(paintPanelLayout);
            paintPanelLayout.setHorizontalGroup(
                paintPanelLayout.createParallelGroup()
                    .addGap(0, 665, Short.MAX_VALUE)
            );
            paintPanelLayout.setVerticalGroup(
                paintPanelLayout.createParallelGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
            );
        }

        //---- btnLine ----
        btnLine.setText("Line");
        btnLine.addActionListener(e -> btnLineActionPerformed(e));

        //---- btnRect ----
        btnRect.setText("Rectangle");
        btnRect.addActionListener(e -> btnRectActionPerformed(e));

        //---- btnCircle ----
        btnCircle.setText("Circle");
        btnCircle.addActionListener(e -> btnCircleActionPerformed(e));

        //---- btnMove ----
        btnMove.setText("Move");
        btnMove.addActionListener(e -> btnMoveActionPerformed(e));

        //---- btnErase ----
        btnErase.setText("Erase");
        btnErase.addActionListener(e -> btnEraseActionPerformed(e));

        //---- chbIsFill ----
        chbIsFill.setText("Is Filled?");

        //---- triangleButton ----
        triangleButton.setText("Triangle");
        triangleButton.addActionListener(e -> triangle(e));

        //---- polyButton ----
        polyButton.setText("Polygon");
        polyButton.addActionListener(e -> poly(e));

        //---- squareButton ----
        squareButton.setText("Square");
        squareButton.addActionListener(e -> square(e));

        //---- zoomOutButton ----
        zoomOutButton.setText("zoomOut");
        zoomOutButton.addActionListener(e -> zoomOut(e));

        //---- zoomInButton ----
        zoomInButton.setText("zoomIn");
        zoomInButton.addActionListener(e -> zoomIn(e));

        //---- ovalButton ----
        ovalButton.setText("Oval");
        ovalButton.addActionListener(e -> btnOvalActionPerformed(e));

        //---- radioButton1 ----
        radioButton1.setText("BLUE");
        radioButton1.addActionListener(e -> radioButtonBLUE(e));

        //---- radioButton2 ----
        radioButton2.setText("RED");
        radioButton2.addActionListener(e -> radioButton2RED(e));

        //---- radioButton3 ----
        radioButton3.setText("GREEN");
        radioButton3.addActionListener(e -> radioButton3GREEN(e));

        //---- radioButton4 ----
        radioButton4.setText("BLACK");
        radioButton4.addActionListener(e -> radioButton4BLUE(e));

        //---- radioButton5 ----
        radioButton5.setText("YELLOW");
        radioButton5.addActionListener(e -> radioButton5YELLOW(e));

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(triangleButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chbIsFill)
                            .addComponent(btnErase)
                            .addComponent(btnMove)
                            .addComponent(zoomOutButton, GroupLayout.PREFERRED_SIZE, 78, GroupLayout.PREFERRED_SIZE)
                            .addComponent(ovalButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCircle, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRect, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btnLine, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zoomInButton))
                        .addComponent(polyButton)
                        .addComponent(squareButton, GroupLayout.PREFERRED_SIZE, 84, GroupLayout.PREFERRED_SIZE)
                        .addComponent(radioButton1)
                        .addComponent(radioButton2)
                        .addComponent(radioButton3)
                        .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                            .addComponent(radioButton5, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(radioButton4, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGap(53, 53, 53)
                    .addComponent(paintPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(80, 80, 80))
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(btnLine)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnRect)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnCircle)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(triangleButton)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(ovalButton)
                    .addGap(10, 10, 10)
                    .addComponent(polyButton)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(squareButton)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(radioButton1)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(radioButton2)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(radioButton3)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(radioButton4)
                    .addGap(3, 3, 3)
                    .addComponent(radioButton5, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(zoomInButton)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(zoomOutButton)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnMove)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnErase)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(chbIsFill)
                    .addGap(16, 16, 16))
                .addComponent(paintPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void btnLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineActionPerformed
        curAction = ActionType.Draw;
        curShape = ShapeTypes.Line;
        p1 = p2 = p3 = null;
        pArr.clear();
    }//GEN-LAST:event_btnLineActionPerformed

    private void paintPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paintPanelMouseClicked
        switch (curAction) {
            case Draw:
                switch (curShape) {
                    case Line:
                        // if mouse hasn't been clicked yet
                        if (p1 == null) {
                            p1 = new Point(evt.getX(), evt.getY());
                        } else {
                            p2 = new Point(evt.getX(), evt.getY());
                            Line l = new Line(p1, p2, curBorderColor);
                            myArea.addShape(l);
                            p1 = p2 = null;
                        }
                        break;
                    case Rectangle:
                        if (p1 == null) {
                            p1 = new Point(evt.getX(), evt.getY());
                        } else {
                            p2 = new Point(evt.getX(), evt.getY());
                            Rectangle r = new Rectangle(p1, p2, curBorderColor, curFillColor);
                            r.isFilled = chbIsFill.isSelected();
                            myArea.addShape(r);

                            p1 = p2 = null;
                        }
                        break;
                    case Circle:
                        if (p1 == null) {
                            p1 = new Point(evt.getX(), evt.getY());
                        } else {
                            p2 = new Point(evt.getX(), evt.getY());
                            Circle c = new Circle(p1, (int) p1.distance(p2), curBorderColor, curFillColor);
                            c.isFilled = chbIsFill.isSelected();
                            myArea.addShape(c);

                            p1 = p2 = null;
                        }
                        break;

                    case Square:
                        if (p1 == null){
                            p1 = new Point(evt.getX(), evt.getY());
                        } else {
                            p2 = new Point(evt.getX(), evt.getY());
                            Square square = new Square(p1 , p2 , curBorderColor, curFillColor );
                            square.isFilled = chbIsFill.isSelected();
                            myArea.addShape(square);
                            p1 = p2 = null;
                        }

                        break;
                    case Oval:
                        if (p1 == null){
                            p1 = new Point(evt.getX(), evt.getY());
                        } else {
                            p2 = new Point(evt.getX(), evt.getY());
                            Oval oval = new Oval(p1 , p2 , Math.abs(p2.getY() - p1.getY()), Math.abs(p2.getX() - p1.getX()), curBorderColor , curFillColor );
                            oval.isFilled = chbIsFill.isSelected();
                            myArea.addShape(oval);
                            p1 = p2 = null;
                        }

                        break;
                    case Triangle:
                        if (p1 == null){
                            p1 = new Point(evt.getX(), evt.getY());
                        } else if (p2 == null) {
                            p2 = new Point(evt.getX(), evt.getY());
                        } else {
                            p3 = new Point(evt.getX(), evt.getY());
                            Triangle triangle = new Triangle(p1 , p2 , p3 , curBorderColor, curFillColor);
                            triangle.isFilled = chbIsFill.isSelected();
                            myArea.addShape(triangle);
                            p1 = p2 = p3 = null;
                        }

                        break;
                    case Polygon:
                        if (pointArray[pointArray.length - 1] == null){
                            pointArray[pointArray.length - 1]  = new Point(evt.getX() , evt.getY());
                            pointArray = Arrays.copyOf(pointArray, pointArray.length + 1);
                        } if (evt.getClickCount() == 2) {
                            pointArray = Arrays.copyOf(pointArray, pointArray.length - 1);
                            Polygon polygon = new Polygon(pointArray , curBorderColor , curFillColor);
                            polygon.isFilled = chbIsFill.isSelected();
                            myArea.addShape(polygon);
                            pointArray = new Point[1];

                        }

//                        pArr.clear()  ;
                        break;
                }
                break;
            case Move:
                if (p1 == null) {
                    p1 = new Point(evt.getX(), evt.getY());
                } else {
                    p2 = new Point(evt.getX(), evt.getY());
                    myArea.moveShape(p1, p2.getX() - p1.getX(), p2.getY() - p1.getY());
                    p1 = p2 = null;
                }
                break;
            case Erase:
                p1 = new Point(evt.getX(), evt.getY());
                Shape s = myArea.getShapeByPoint(p1);
                if (s != null) {
                    myArea.removeShape(myArea.indexOf(s));
                    myArea.reDrawAll();
                }

                break;
            case ZoomIn:
                break;
            case ZoomOut:
                break;

        }

    }//GEN-LAST:event_paintPanelMouseClicked

    private void btnRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRectActionPerformed
        curAction = ActionType.Draw;
        curShape = ShapeTypes.Rectangle;
        p1 = p2 = p3 = null;
        pArr.clear();
    }//GEN-LAST:event_btnRectActionPerformed

    private void btnCircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCircleActionPerformed
        curAction = ActionType.Draw;
        curShape = ShapeTypes.Circle;
        p1 = p2 = p3 = null;
        pArr.clear();
    }//GEN-LAST:event_btnCircleActionPerformed

    private void btnMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveActionPerformed
        curAction = ActionType.Move;
        pArr.clear();
        p1 = p2 = p3 = null;
    }//GEN-LAST:event_btnMoveActionPerformed

    private void btnEraseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEraseActionPerformed
        curAction = ActionType.Erase;
        pArr.clear();
        p1 = p2 = p3 = null;
    }//GEN-LAST:event_btnEraseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyPaint().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - Parsa Es
    private JPanel paintPanel;
    private JButton btnLine;
    private JButton btnRect;
    private JButton btnCircle;
    private JButton btnMove;
    private JButton btnErase;
    private JCheckBox chbIsFill;
    private JButton triangleButton;
    private JButton polyButton;
    private JButton squareButton;
    private JButton zoomOutButton;
    private JButton zoomInButton;
    private JButton ovalButton;
    private JRadioButton radioButton1;
    private JRadioButton radioButton2;
    private JRadioButton radioButton3;
    private JRadioButton radioButton4;
    private JRadioButton radioButton5;
    // End of variables declaration//GEN-END:variables
}
